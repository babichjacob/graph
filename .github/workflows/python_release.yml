# Taken and adapted from Ruff under MIT License:
# https://github.com/charliermarsh/ruff/blob/e00bcd19f51f33a399751d2a7b854d59024473ca/.github/workflows/ruff.yaml
# Their license: https://raw.githubusercontent.com/charliermarsh/ruff/e00bcd19f51f33a399751d2a7b854d59024473ca/LICENSE

name: "graph-mate release"

on:
  create:
    tags:
      - graph-mate-v*
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: "graph_mate"
  PYTHON_VERSION: "3.8" # to build abi3 wheels
  MATURIN_ARGS: "--features extension-module --manifest-path crates/unladen_swallow/Cargo.toml --release --out dist"

jobs:
  macos-x86_64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: ${{ env.MATURIN_ARGS }} --sdist
          maturin-version: "v0.13.5"
      - name: Install built wheel - x86_64
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
          python -c "import ${{ env.PACKAGE_NAME }}"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
  macos-universal:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          args: ${{ env.MATURIN_ARGS }} --universal2
          maturin-version: "v0.13.5"
      - name: Install built wheel - universal2
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-*universal2.whl --force-reinstall
          python -c "import ${{ env.PACKAGE_NAME }}"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.target }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: ${{ env.MATURIN_ARGS }}
          maturin-version: "v0.13.5"
      - name: Install built wheel
        shell: bash
        run: |
          python -m pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
          python -c "import ${{ env.PACKAGE_NAME }}"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: ${{ env.MATURIN_ARGS }}
          maturin-version: "v0.13.5"
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
          python -c "import ${{ env.PACKAGE_NAME }}"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: ${{ env.MATURIN_ARGS }}
          maturin-version: "v0.13.5"
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Install built wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip
          run: |
            pip3 install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall
            python3 -c "import ${{ env.PACKAGE_NAME }}"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - macos-universal
      - macos-x86_64
      - windows
      - linux
      - linux-cross
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v4
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.GRAPH_PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
